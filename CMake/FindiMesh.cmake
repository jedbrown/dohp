# - Try to find iMesh
# Once done this will define
#
#  IMESH_FOUND - system has iMesh
#  IMESH_INCLUDES - The iMesh include directory
#  IMESH_LIBRARIES - Link these to use iMesh
#
# Setting this changes the behavior of the search
#  IMESH_DEFS_FILE - path to iMesh-Defs.inc
#
# If this variable is in your environment, it will be used to as a hint
#  IMESH_DIR - directory in which PETSc resides
#
# Redistribution and use is allowed according to the terms of the BSD license.
# For details see the accompanying COPYING-CMAKE-SCRIPTS file.
#


find_path (IMESH_DIR
  NAMES lib/iMesh-Defs.inc lib64/iMesh-Defs.inc include/iMesh.h
  HINTS ENV IMESH_DIR)

include (FindPackageMultipass)
# If the user changes IMESH_DIR, relocate IMESH_DEFS_FILE
if (PACKAGE_MULTIPASS_IMESH_DIR)
  if (IMESH_DIR STREQUAL "${PACKAGE_MULTIPASS_IMESH_DIR}")
    # Do nothing
  else (IMESH_DIR STREQUAL "${PACKAGE_MULTIPASS_IMESH_DIR}")
    set (IMESH_DEFS_FILE "NOTFOUND" CACHE INTERNAL "Cleared" FORCE)
  endif (IMESH_DIR STREQUAL "${PACKAGE_MULTIPASS_IMESH_DIR}")
endif (PACKAGE_MULTIPASS_IMESH_DIR)

find_file (IMESH_DEFS_FILE iMesh-Defs.inc
  HINTS ${IMESH_DIR}
  PATH_SUFFIXES lib lib64)

# If IMESH_DEFS_FILE has changed, wipe dependents
find_package_multipass (iMesh imesh_config_current
  STATES DIR DEFS_FILE
  DEPENDENTS INCLUDES LIBRARIES)

if (NOT imesh_config_current)
  # A temporary makefile to probe the iMesh configuration
  set (imesh_config_makefile "${PROJECT_BINARY_DIR}/Makefile.imesh")
  file (WRITE ${imesh_config_makefile}
"## This file was autogenerated by FindiMesh.cmake
include ${IMESH_DEFS_FILE}
show :
	-@echo -n \${\${VARIABLE}}")
  macro (IMESH_GET_VARIABLE name var)
    set (${var} "NOTFOUND" CACHE INTERNAL "Cleared" FORCE)
    execute_process (COMMAND ${CMAKE_MAKE_PROGRAM} -f ${imesh_config_makefile} show VARIABLE=${name}
      OUTPUT_VARIABLE ${var}
      RESULT_VARIABLE imesh_return)
  endmacro (IMESH_GET_VARIABLE)
  imesh_get_variable (IMESH_INCLUDEDIR   imesh_includedir)
  imesh_get_variable (IMESH_LIBDIR       imesh_libdir)
  imesh_get_variable (IMESH_LIBS         imesh_libs_extra)
  file (REMOVE ${imesh_config_makefile})

  # Confirm that iMesh.h is really there
  find_path (imesh_includes_tmp iMesh.h HINTS ${imesh_includedir} NO_DEFAULT_PATH)
  set (imesh_includes ${imesh_includes_tmp})
  set (imesh_includes_tmp "NOTFOUND" CACHE INTERNAL "Cleared" FORCE)
  find_path (imesh_includes_tmp iMeshP.h HINTS ${imesh_includedir} NO_DEFAULT_PATH)
  if (imesh_includes_tmp)
    set (IMESH_HAS_PARALLEL "YES")
  else (imesh_includes_tmp)
    set (IMESH_HAS_PARALLEL "NO")
  endif (imesh_includes_tmp)
  set (imesh_includes_tmp "NOTFOUND" CACHE INTERNAL "Cleared" FORCE)

  set (IMESH_LIBRARY "NOTFOUND" CACHE INTERNAL "Cleared" FORCE)
  find_library (IMESH_LIBRARY iMesh HINTS "${imesh_libdir}" NO_DEFAULT_PATH)
  mark_as_advanced (IMESH_LIBRARY)

  include (ResolveCompilerPaths)

  include (CheckCSourceRuns)
  macro (IMESH_TEST_RUNS libraries runs)
    multipass_c_source_runs (iMesh "${imesh_includes}" "${libraries}" "
/* iMesh test program */
#include \"iMesh.h\"
#define CHK(err) if (err) return 1
int main(int argc,char *argv[]) {
  int ierr;
  iMesh_Instance mesh;
  iMesh_newMesh(\"\",&mesh,&ierr,0);CHK(ierr);
  iMesh_dtor(mesh,&ierr);CHK(ierr);
  return 0;
}
" ${runs})
    if (${${runs}})
      set (IMESH_EXECUTABLE_RUNS "YES" CACHE BOOL
	"Can the system successfully run a iMesh executable?  This variable can be manually set to \"YES\" to force CMake to accept a given iMesh configuration, but this will almost always result in a broken build.  If you change IMESH_DIR, IMESH_DEFS_FILE, or IMESH_CURRENT you would have to reset this variable." FORCE)
    endif (${${runs}})
  endmacro (IMESH_TEST_RUNS)

  imesh_test_runs ("${IMESH_LIBRARY}" imesh_works_minimal)
  if (imesh_works_minimal)
    message (STATUS "iMesh executable works when only linking to the interface libs, this probably means you have shared libs.")
    set (imesh_libraries_needed "${IMESH_LIBRARY}")
  else (imesh_works_minimal)
    include (ResolveCompilerPaths)
    resolve_libraries (imesh_libraries_needed "${imesh_libs_extra}")
    imesh_test_runs ("${imesh_libraries_needed}" imesh_works_extra)
    if (imesh_works_extra)
      message (STATUS "iMesh executable requires linking to extra libs, this probably means it's statically linked.")
    else (imesh_works_extra)
      message (STATUS "iMesh could not be used, maybe the install is broken.")
    endif (imesh_works_extra)
  endif (imesh_works_minimal)

  set (IMESH_INCLUDES "${imesh_includes}" CACHE STRING "iMesh include path" FORCE)
  set (IMESH_LIBRARIES "${imesh_libraries_needed}" CACHE STRING "iMesh libraries" FORCE)
  mark_as_advanced (IMESH_INCLUDES IMESH_LIBRARIES IMESH_EXECUTABLE_RUNS)
endif (NOT imesh_config_current)

include (FindPackageHandleStandardArgs)
find_package_handle_standard_args (iMesh
  "iMesh could not be found.  Be sure to set IMESH_DIR or IMESH_DEFS_FILE or the environment variable IMESH_DIR."
  IMESH_INCLUDES IMESH_LIBRARIES IMESH_EXECUTABLE_RUNS)
