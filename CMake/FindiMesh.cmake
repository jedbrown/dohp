# - Try to find iMesh
# Once done this will define
#
#  IMESH_FOUND - system has iMesh
#  IMESH_INCLUDE_PATH - The iMesh include directory
#  IMESH_LIBRARIES - Link these to use iMesh
#
# Setting this changes the behavior of the search
#  IMESH_DEFS_FILE - path to iMesh-Defs.inc
#
# If this variable is in your environment, it will be used to as a hint
#  IMESH_DIR - directory in which PETSc resides
#
# Redistribution and use is allowed according to the terms of the BSD license.
# For details see the accompanying COPYING-CMAKE-SCRIPTS file.
#

find_file (IMESH_DEFS_FILE iMesh-Defs.inc
  PATHS /usr /usr/local
  HINTS ENV IMESH_DIR
  PATH_SUFFIXES lib lib64)

set (IMESH_CONFIG_CURRENT TRUE)
if (NOT "${IMESH_DEFS_FILE}" STREQUAL "${IMESH_DEFS_FILE_PRIVATE}")
  set (IMESH_CONFIG_CURRENT FALSE)
endif (NOT "${IMESH_DEFS_FILE}" STREQUAL "${IMESH_DEFS_FILE_PRIVATE}")

if (IMESH_CONFIG_CURRENT AND IMESH_INCLUDE_PATH AND IMESH_LIBRARIES)
  # Do nothing: all variables are in cache
elseif (IMESH_DEFS_FILE)
  set (IMESH_DEFS_FILE_PRIVATE ${IMESH_DEFS_FILE} CACHE INTERNAL "Saved value" FORCE)

  # A temporary makefile to probe the iMesh configuration
  set (IMESH_CONFIG_MAKEFILE ${PROJECT_BINARY_DIR}/Makefile.imesh)

  file (WRITE ${IMESH_CONFIG_MAKEFILE}
"## This file was autogenerated by FindiMesh.cmake
include ${IMESH_DEFS_FILE}
show_includes :
	-@echo \${IMESH_INCLUDES}
show_incdir :
	-@echo \${IMESH_INCLUDEDIR}
show_libs :
	-@echo \${IMESH_LIBS}
")

  exec_program(${CMAKE_MAKE_PROGRAM}
    ARGS -f ${IMESH_CONFIG_MAKEFILE} show_includes
    OUTPUT_VARIABLE IMESH_INCLUDES_LINE
    RETURN_VALUE IMESH_RETURN)

  exec_program(${CMAKE_MAKE_PROGRAM}
    ARGS -f ${IMESH_CONFIG_MAKEFILE} show_libs
    OUTPUT_VARIABLE IMESH_LIBS_LINE
    RETURN_VALUE IMESH_RETURN)

  file (REMOVE ${IMESH_CONFIG_MAKEFILE})

  # collect the includes and strip
  string (REGEX MATCHALL "-I([^\" ]+|\"[^\"]+\")" IMESH_ALL_INCLUDE_PATHS "${IMESH_INCLUDES_LINE}")
  set (IMESH_INCLUDE_PATH_WORK)
  foreach (IPATH ${IMESH_ALL_INCLUDE_PATHS})
    string (REGEX REPLACE "^-I" "" IPATH ${IPATH})
    string (REGEX REPLACE "//" "/" IPATH ${IPATH})
    list (APPEND IMESH_INCLUDE_PATH_WORK ${IPATH})
  endforeach (IPATH)
  list (REMOVE_DUPLICATES IMESH_INCLUDE_PATH_WORK)

  # scan tokens, find library with current library directories
  string (REGEX MATCHALL "(-L|-Wl,|-l)([^\" ]+|\"[^\"]+\")" IMESH_ALL_LINK_TOKENS "${IMESH_LIBS_LINE}")
  set (IMESH_LINK_PATHS)
  set (IMESH_LINK_FLAGS_WORK)
  set (IMESH_LIBRARIES_FOUND)
  set (IMESH_LIBRARIES_MISSING)
  foreach (TOKEN ${IMESH_ALL_LINK_TOKENS})
    if (TOKEN MATCHES "-L([^\" ]+|\"[^\"]+\")") # If it's a library path, prepend it to the list
      string (REGEX REPLACE "^-L" "" TOKEN ${TOKEN})
      string (REGEX REPLACE "//" "/" TOKEN ${TOKEN})
      list (INSERT IMESH_LINK_PATHS 0 ${TOKEN})
    elseif (TOKEN MATCHES "-Wl,([^\" ]+|\"[^\"]+\")") # If it's a link flag, put it in the flags list
      if (IMESH_LINK_FLAGS_WORK)
	set (IMESH_LINK_FLAGS_WORK "${IMESH_LINK_FLAGS_WORK} ${TOKEN}")
      else (IMESH_LINK_FLAGS_WORK)
	set (IMESH_LINK_FLAGS_WORK ${TOKEN})
      endif (IMESH_LINK_FLAGS_WORK)
    elseif (TOKEN MATCHES "-l([^\" ]+|\"[^\"]+\")") # If it's a library, get the absolute path by searching in IMESH_LINK_PATHS
      string (REGEX REPLACE "^-l" "" TOKEN ${TOKEN})
      set (IMESH_LIB "IMESH_LIB-NOTFOUND" CACHE FILEPATH "Cleared" FORCE)
      find_library (IMESH_LIB ${TOKEN} HINTS ${IMESH_LINK_PATHS})
      if (IMESH_LIB)
	list (APPEND IMESH_LIBRARIES_FOUND ${IMESH_LIB})
      else (IMESH_LIB)
	list (APPEND IMESH_LIBRARIES_MISSING ${IMESH_LIB})
	message (SEND_ERROR "Unable to find iMesh library ${TOKEN}")
      endif (IMESH_LIB)      
    endif (TOKEN MATCHES "-L([^\" ]+|\"[^\"]+\")")
  endforeach (TOKEN)
  set (IMESH_LIB "IMESH_LIB-NOTFOUND" CACHE INTERNAL "Scratch variable for PETSc detection" FORCE)
  list (REMOVE_DUPLICATES IMESH_LIBRARIES_FOUND)

  set (IMESH_INCLUDE_PATH ${IMESH_INCLUDE_PATH_WORK} CACHE STRING "iMesh include path" FORCE)
  set (IMESH_LIBRARIES ${IMESH_LIBRARIES_FOUND} CACHE STRING "iMesh libraries" FORCE)
endif (IMESH_CONFIG_CURRENT AND IMESH_INCLUDE_PATH AND IMESH_LIBRARIES)

set (IMESH_DEFS_FILE ${IMESH_DEFS_FILE} CACHE FILEPATH "iMesh makefile include")

include (FindPackageHandleStandardArgs)
find_package_handle_standard_args (iMesh
  "iMesh could not be found.  Be sure to set IMESH_DEFS_FILE or have IMESH_DIR in your environment."
  IMESH_INCLUDE_PATH IMESH_LIBRARIES)

mark_as_advanced (IMESH_INCLUDE_PATH IMESH_LIBRARIES)
